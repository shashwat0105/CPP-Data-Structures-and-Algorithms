Topics:
1) Primality Test
2) Prime factorization
3) Sieve of Eratosthenes (In a range to find whether a given no is prime or not, it generates al)
4) Binary Exponentiation (Allow us to calculate a^n in log n time)
5) Euclid Algorithm for GCD
6) Goldbach's conjecture
7) Finding number of divisors of N
8) Calculating Binomial Coefficient 
9) Segmented Sieve 
10) Modulo Inverse (very imp)
11) Extended Euclidean (To calculate modulo inverse(if it exists) & to solve a  Linear Diophantine equation (LDE))
12) Matrix exponentiation (Matrix^n)
13) Fibonacci numbers in O(logn) (we use matrix exponentiation for this)
14) Chinese Remainder Theorem
15) Euler Totient Function (ETF of a number n = no of integers from 1 to n whose GCD with n is 1 ie co-prime with n) example: ETF of 6 is 2 (1 and 5)
16) Sum of divisors
17) Pollard p-1 method (Integer factorization(20 digits))
18) Pollard Rho Algorithm



MATHEMATICS:-
The task is to find the count of digits present in N
Simple Solution that comes in mind is:

1.    Check if the number N is not equals to zero.
2.    Increase the count of digits by 1 if N is not zero.
3.    Reduce the number by dividing it by 10.
4.    Repeat the above steps until the number is reduced to zero.
So, the time complexity of the solution is O(digitsCount).

Better Solution: 
number of digits in N = log10(N) + 1.
Proof :- 10K-1 <= N < 10K
Therefore, the time complexity of the solution is O(1).

PRIME NUMBERS:-
Simple approach
Naive Method to Check if a number is Prime: Since a number is prime only if it is divisible by 1 and the number itself, 
the naive method to check for primality of a number would be to iterate from 1 to N and check if there aren't any factors of N 
except and 1 and N itself.

Algorithm:
1. If, N is less than 2. It is not prime, return False.
2. Else:    Iterate from 2 to N-1 and check if any of the numbers between 2 and N-1 (both inclusive) divides N or not. 
If yes, then N is not prime, return False.
Otherwise, return True.

Analysis of the above algorithm: Since we are traversing linearly from 2 to N-1, the time complexity of the above algorithm will be 
linear O(N).

All prime numbers are of the form 6k+-1, except 2 & 3.

Using Sieve of Eratosthenes is the most efficient way of generating prime numbers upto a given number N.
https://youtu.be/ATyAnOCI1Ms

LCM & HCF:-

Recursive function for finding GCD/HCF using Euclidean Algorithm:
gcd(a, b)
{
   if (a == 0)
       return b;

   return gcd(b % a, a);
}
Time Complexity: O(log(min(a, b)))
Important properties of LCM and HCF:
1. For two numbers say, 'a' and 'b', LCM x HCF = a x b.
2. HCF of co-primes = 1.
3. For two fractions,
    HCF = HCF (Numerators) / LCM (Denominators)
    LCM = LCM (Numerators) / HCF (Denominators)

FACTORIAL :-
Trailing 0s in N! = Count of 5s in prime factors of n!
                 = floor(n/5) + floor(n/25) + floor(n/125) + ....

Inbuilt GCD function in C++ :- __gcd(a,b)
#include<iostream>
#include<algorithm>
using namespace std;

main()
{
cout<<__gcd(10,40); //output: 10
}

In C++17, a new STL function for calculating LCM of two numbers, std::lcm(), has been introduced, 
which can be used on any compiler supporting C++17 features.

